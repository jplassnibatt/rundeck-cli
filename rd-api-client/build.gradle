import java.text.SimpleDateFormat

buildscript {
    repositories {
        jcenter()
    }
}
plugins{
    id "java-library"
    id "org.dvaske.gradle.git-build-info" version "0.8"
    id 'de.fuerstenau.buildconfig' version '1.1.8'
    id 'maven-publish'
    id "org.sonarqube" version "3.0"
}




apply plugin: 'idea'
apply plugin: 'groovy'
apply plugin: 'de.fuerstenau.buildconfig'

group = 'org.rundeck.api'

sonarqube {
  properties {
    property "sonar.projectKey", "rundeck_rundeck-cli_rd-api-client"
    property "sonar.organization", "rundeck"
    property "sonar.host.url", "https://sonarcloud.io"
  }
}

/**
 * Generates java source with embedded version info
 */
buildConfig {
    clsName = 'Version'
    packageName = 'org.rundeck.client'
    buildConfigField 'String', 'GIT_COMMIT', {
        project.gitCommit
    }
    buildConfigField 'String', 'GIT_BRANCH', {
        project.gitBranch
    }
    buildConfigField 'String', 'GIT_DESCRIPTION', {
        project.gitDescribeInfo
    }
    buildConfigField 'String', 'BUILD_DATE', {
        new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssX").format(new Date())
    }

}


dependencies {

    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    api "com.squareup.retrofit2:retrofit:${retrofitVersion}"
    api "com.squareup.retrofit2:converter-jackson:${retrofitVersion}"
    api "com.squareup.retrofit2:converter-jaxb:${retrofitVersion}"
    api 'com.squareup.okhttp3:logging-interceptor:3.5.0'
    api 'com.squareup.okhttp3:okhttp-urlconnection:3.5.0'


    testImplementation group: 'junit', name: 'junit', version: '4.12'
    testImplementation "com.squareup.retrofit2:retrofit-mock:${retrofitVersion}"
    testImplementation 'com.squareup.okhttp3:mockwebserver:3.5.0'
    testImplementation "org.codehaus.groovy:groovy-all:2.5.7"
    testImplementation "org.spockframework:spock-core:1.3-groovy-2.5"
}


java {
    withJavadocJar()
    withSourcesJar()
}

javadoc {
    if (JavaVersion.current().isJava8Compatible()) {
        options.addStringOption('Xdoclint:none', '-quiet')
    }
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}
publishing {
    publications {
        rdApiClientPublication(MavenPublication) {
            from components.java

            pom {
                name = "Rundeck API Library ${project.version}"
                description = project.description ?: 'Rundeck API Library'
                url = 'https://github.com/rundeck/rundeck-cli'
                licenses {
                    license {
                        name= 'The Apache Software License, Version 2.0'
                        url ='http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution= 'repo'
                    }
                }
                scm {
                    url ='https://github.com/rundeck/rundeck-cli'
                    connection= 'scm:git:git@github.com/rundeck/rundeck-cli.git'
                    developerConnection= 'scm:git:git@github.com:rundeck/rundeck-cli.git'
                }
                developers {
                    developer {
                        id='gschueler'
                        name='Greg Schueler'
                        email='greg@rundeck.com'
                    }
                }
            }

        }
    }
}

def bintrayUser = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
def bintrayKey = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') :
                 System.getenv('BINTRAY_API_KEY')
def bintrayUserOrg = project.hasProperty('bintrayUserOrg') ? project.property('bintrayUserOrg') :
                     System.getenv('BINTRAY_USER_ORG')
def bintrayRepo = project.hasProperty('bintrayRepo') ? project.property('bintrayRepo') :
                  System.getenv('BINTRAY_REPO')

def component = (
        project.hasProperty('component') ? project.property('component') :
        System.getenv('BINTRAY_UPLOAD_COMPONENT')
)
if (component &&  ['api'].contains(component) && bintrayUser && bintrayKey && bintrayRepo) {

    apply plugin: 'com.jfrog.bintray'
    bintray {
        user = bintrayUser
        key = bintrayKey
        publications = ['rdApiClientPublication']

        dryRun = false
        publish = true
        override = true
        pkg {
            name = project.name
            repo = bintrayRepo
            if (bintrayUserOrg) {
                userOrg = bintrayUserOrg
            }
            licenses = ['Apache-2.0']
            vcsUrl = 'https://github.com/rundeck/rundeck-cli.git'
            websiteUrl = 'https://github.com/rundeck/rundeck-cli'
            issueTrackerUrl = 'https://github.com/rundeck/rundeck-cli/issues'
            githubRepo = 'rundeck/rundeck-cli' //Optional Github repository
            githubReleaseNotesFile = 'README.md' //Optional Github readme file

            version {
                name = rpmVersion
                desc = "${description} ${rpmVersion}"
                vcsTag = "v${rpmVersion}"
                gpg {
                    sign = true //Determines whether to GPG sign the files. The default is false
                    passphrase = System.getenv('SIGNING_PASSWORD')
                }
            }
        }
    }
}
